{"version":3,"sources":["components/Wrapper/index.js","utils/API.js","components/ResultsContainer/index.js","components/Nav/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","query","offset","axios","get","BASEURL","ResultsContainer","src","imageUrl","alt","name","onClick","handleClick","itemId","Nav","style","guess","display","score","topScore","clickedArray","Home","loadImages","randomNumber","Math","floor","random","API","then","res","setState","results","data","catch","err","console","log","id","state","indexOf","push","this","map","item","images","fixed_height_still","url","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iSAOeA,MAJf,SAAiBC,GACb,OAAO,wCAAMC,UAAU,WAAcD,K,yDCC1B,EACF,SAASE,EAAQC,GAC1B,OAAOC,IAAMC,IALD,0CAKeH,EAAVI,sEAAgDH,EAAQ,sBCG9DI,MARf,SAA0BP,GACtB,OACI,yBAAKC,UAAU,SACX,yBAAKO,IAAKR,EAAMS,SAAUC,IAAKV,EAAMW,KAAMC,QAAS,kBAAMZ,EAAMa,YAAYb,EAAMc,a,MCc/EC,MAhBf,SAAaf,GACX,OACE,6BACE,yBAAKC,UAAU,WACb,4CACA,yBAAKe,MAAsB,KAAdhB,EAAMiB,MAAa,CAAEC,QAAQ,QAAU,CAACA,QAAU,UAA/D,4BACA,yBAAKF,MAAsB,KAAdhB,EAAMiB,MAAa,CAAEC,QAAQ,SAAW,CAACA,QAAU,SAAYlB,EAAMiB,MAAQ,0BAAMhB,UAAU,cAAhB,0BAC1F,0BAAMA,UAAU,yCAAhB,yBACA,uCACUD,EAAMmB,MADhB,iBACqCnB,EAAMoB,SAAU,QCJzDC,EAAe,GA8DJC,E,kDAzDX,aAAe,IAAD,8BACd,gBAgBFC,WAAa,WACT,IAAIC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UACrCC,EAAc,iBAAkBJ,GAC7BK,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAAEC,QAASF,EAAIG,KAAKA,UAChDC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OArBhB,EAwBhBtB,YAAc,SAACyB,GAEN,EAAKC,MAAMlB,aAAamB,QAAQF,IAAO,GACtCF,QAAQC,IAAI,gBACZ,EAAKN,SAAS,CAAEZ,MAAM,EAAGC,SAAU,EAAKmB,MAAMnB,SAAUC,aAAc,GAAIJ,OAAO,MAEjFI,EAAaoB,KAAKH,GAClB,EAAKP,SAAS,CAAEZ,MAAO,EAAKoB,MAAMpB,MAAQ,EAAGC,SAAU,EAAKmB,MAAMnB,SAAU,EAAIC,aAAcA,EAAcJ,OAAM,KAGtHmB,QAAQC,IAAIhB,GAEhB,EAAKE,cAlCL,EAAKgB,MAAQ,CACXP,QAAS,GACTb,MAAO,EACPC,SAAU,EACVC,aAAe,GACfJ,MAAO,IAPK,E,gEAcfyB,KAAKnB,e,+BAyBI,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKJ,MAAOuB,KAAKH,MAAMpB,MAAOC,SAAUsB,KAAKH,MAAMnB,SAAUH,MAAOyB,KAAKH,MAAMtB,QAC/E,yBAAKhB,UAAU,aACZyC,KAAKH,MAAMP,QAAQW,KAAI,SAACC,GAAD,OACtB,kBAAC,EAAD,CACEnC,SAAUmC,EAAKC,OAAOC,mBAAmBC,IACzClC,YAAa,EAAKA,YAClBC,OAAQ8B,EAAKN,GACbU,IAAKJ,EAAKN,c,GAnDLW,aCCJC,MARf,WACE,OACA,kBAAC,EAAD,KACA,kBAAC,EAAD,QCKkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.3bde292b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props){\r\n    return <main className=\"wrapper\" {...props} />;\r\n}\r\n\r\nexport default Wrapper;","import axios from \"axios\";\r\n//https://api.giphy.com/v1/gifs/search?api_key=BkaUZZWcFij6J7AoQj3WtPb1R2p9O6V9&q=cartoon+images&limit=1&offset=0&rating=G&lang=en\"\r\nconst BASEURL = \"https://api.giphy.com/v1/gifs/search?q=\";\r\nconst APIKEY = \"&api_key=BkaUZZWcFij6J7AoQj3WtPb1R2p9O6V9&limit=20\";\r\n\r\nexport default {\r\n  getImages: function(query , offset) {\r\n    return axios.get(BASEURL + query + APIKEY + \"&limit=10&offset=\"+ offset +\"&rating=G&lang=en\");\r\n  }\r\n};","import React from \"react\";\r\n\r\nfunction ResultsContainer(props){\r\n    return (\r\n        <div className=\"image\">\r\n            <img src={props.imageUrl} alt={props.name} onClick={() => props.handleClick(props.itemId)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultsContainer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <nav>\r\n      <div className=\"content\">\r\n        <div>Clicky Game</div>\r\n        <div style={ props.guess!==\"\" ? { display:'none'} : {display : 'block'} }>Click an Image to begin!</div>\r\n        <div style={ props.guess!==\"\" ? { display:'block'} : {display : 'none'}} >{ props.guess ? <span className=\"rightGuess\">You Guessed Correctly!</span> : \r\n        <span className=\"wrongGuess shake-chunk shake-constant\">Your Guess is Wrong!</span>}</div>\r\n        <div>\r\n          Score: {props.score} | Top Score: {props.topScore}{\" \"}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, \r\n{ Component } from \"react\";\r\nimport \"./style.css\";\r\nimport API from \"../../utils/API\";\r\nimport ResultsContianer from \"../ResultsContainer\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport Nav from \"../Nav\";\r\n\r\nlet clickedArray = [];\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    constructor() {\r\n    super();\r\n    this.state = {\r\n      results: [],\r\n      score: 0,\r\n      topScore: 0,\r\n      clickedArray : [],\r\n      guess: \"\"\r\n    };\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n   this.loadImages();\r\n  }\r\n\r\n  loadImages = () => {\r\n      let randomNumber = Math.floor(Math.random() * 9);\r\n    API.getImages(\"cartoon Images\", randomNumber)\r\n      .then((res) => this.setState({ results: res.data.data }))\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleClick = (id) => {\r\n\r\n        if(this.state.clickedArray.indexOf(id) > -1){\r\n            console.log(\"wrong gueess\");\r\n            this.setState({ score:0, topScore: this.state.topScore, clickedArray: [], guess: false });\r\n        }else{\r\n            clickedArray.push(id);\r\n            this.setState({ score: this.state.score + 1, topScore: this.state.topScore +1 , clickedArray: clickedArray, guess:true});\r\n        }\r\n\r\n        console.log(clickedArray);\r\n\r\n    this.loadImages();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Nav score={this.state.score} topScore={this.state.topScore} guess={this.state.guess}/>\r\n        <div className=\"container\">\r\n          {this.state.results.map((item) => (\r\n            <ResultsContianer\r\n              imageUrl={item.images.fixed_height_still.url}\r\n              handleClick={this.handleClick}\r\n              itemId={item.id}\r\n              key={item.id} />\r\n          ))}\r\n        </div>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport Wrapper from './components/Wrapper';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n  <Wrapper>\n  <Home />\n  </Wrapper>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}